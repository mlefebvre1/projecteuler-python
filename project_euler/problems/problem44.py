from typing import List

from project_euler.geometry.geometry import pentagonal

from project_euler.utils.timeit import timeit


def generate_cache_is_pentagonal(max_n: int, pentagonals: List[int]) -> List[bool]:
    cache_is_pentagonal = [False for _ in range(0, pentagonal(max_n))]
    for pent in pentagonals:
        cache_is_pentagonal[pent] = True
    return cache_is_pentagonal


def is_sum_and_diff_pentagonal(S: int, D: int, cache: List[bool]) -> bool:
    try:
        if cache[D] and cache[S]:
            return True
        else:
            return False
    except IndexError:
        return False


def pentagon() -> int:
    _MAX_N = 2500  # found by trial and error
    pentagonals = [pentagonal(n) for n in range(1, _MAX_N)]
    cache_is_pentagonal = generate_cache_is_pentagonal(_MAX_N, pentagonals)
    for j, pj in enumerate(pentagonals):
        for pk in pentagonals[j + 1 :]:
            D, S = pk - pj, pk + pj
            if is_sum_and_diff_pentagonal(S, D, cache_is_pentagonal):
                return D


@timeit
def problem44():
    """
    Pentagon numbers
    Problem 44

    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj|
    is minimised; what is the value of D?
    """
    return pentagon()


problem44()
