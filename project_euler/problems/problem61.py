from typing import List

import project_euler.geometry.geometry as geometry

from project_euler.utils.timeit import timeit


def make_polygonals() -> List[List[int]]:
    """
    Worst case is triangular : t(n) = n*(n+1)/2
    Let's find n for t(n) = 10000
    n^2 + n - 20000 = 0
    Find the root with a = 1, b = 1, c = -20000
    n = (-b + sqrt(b^2-4*a*c)) / (2*a)
    n = (-1 + sqrt(1-4*1*-20000) / 2
    n ~= 140.42.. so 141
    """
    max_n = 141
    polygonal_funcs = [
        geometry.triangular,
        geometry.square,
        geometry.pentagonal,
        geometry.hexagonal,
        geometry.heptagonal,
        geometry.octagonal,
    ]
    polygonals = [[], [], [], [], [], []]
    for n in range(max_n):
        for i, func in enumerate(polygonal_funcs):
            if 1000 < func(n) < 10000:
                polygonals[i].append(func(n))
    return polygonals


def generate_next_candidates(
    last_two_digits: str, visited: List[bool], polygonals: List[List[int]]
):
    """if the first 2 digits match the last two digits of our number, this is a potential next candidate"""
    for index, (visited, polygonal) in enumerate(zip(visited, polygonals)):
        if not visited:
            for n in polygonal:
                if str(n)[0:2] == last_two_digits:
                    yield index, n


def all_visited(visited: List[bool]) -> bool:
    """True if all polygonals were used"""
    for value in visited:
        if not value:
            return False
    else:
        return True


def cyclical_figurate_recursive_search(
    first_two_digits: str, n: int, visited: List[bool], polygonals: List[List[int]]
):
    if all_visited(visited) and str(n)[2:4] == first_two_digits:
        return True, 0
    for index, candidate in generate_next_candidates(str(n)[2:4], visited, polygonals):
        visited_copy = visited.copy()
        visited_copy[index] = True
        is_done, total = cyclical_figurate_recursive_search(
            first_two_digits, candidate, visited_copy, polygonals
        )
        if is_done:
            return True, total + candidate
    else:
        return False, 0


@timeit
def problem61():
    """
    Cyclical figurate numbers
    Problem 61

    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
    are generated by the following formulae:
    Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Square 	  	    P4,n=n2 	  	    1, 4, 9, 16, 25, ...
    Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
    Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
    Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        The set is cyclic, in that the last two digits of each number is the first two digits of the next number
        (including the last number with the first).
        Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by
        a different number in the set.
        This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
    pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
    """

    polygonals = make_polygonals()
    polygona_visited = [False, False, False, False, False, False]
    for n in polygonals[0]:
        visited_copy = polygona_visited.copy()
        visited_copy[0] = True
        is_done, cyclic_sum = cyclical_figurate_recursive_search(
            str(n)[0:2], n, visited_copy, polygonals
        )
        if is_done:
            return cyclic_sum + n


problem61()
